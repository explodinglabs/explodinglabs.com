{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Generate JSON-RPC requests and parse responses in Python.</p> <p>Jump to: GitHub | Community Wiki</p> <pre><code>pip install jsonrpcclient\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Requests</li> <li>Responses</li> <li>Faq</li> <li>Examples</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Examples have moved to the Community Wiki.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-to-use-a-different-json-library","title":"How to use a different json library?","text":"<p>The <code>request_json</code> function is simply <code>json.dumps</code> after <code>request</code>, and the <code>parse_json</code> function is simply <code>parse</code> after <code>json.loads</code>.</p> <p>So here's how one could write their own, using a different json library (ujson here):</p> <pre><code>from jsonrpcclient import request, parse\nfrom jsonrpcclient.utils import compose\nimport ujson\n\nparse_json = compose(parse, ujson.loads)\nrequest_json = compose(ujson.dumps, request)\n</code></pre>"},{"location":"requests/","title":"Generating requests","text":""},{"location":"requests/#the-request-function","title":"The request function","text":"<p>Generate a request with the <code>request</code> function:</p> <pre><code>&gt;&gt;&gt; from jsonrpcclient import request, request_json\n&gt;&gt;&gt; request(\"ping\")\n{'jsonrpc': '2.0', 'method': 'ping', 'id': 1}\n</code></pre> <p><code>request_json</code> gives a string:</p> <pre><code>&gt;&gt;&gt; request_json(\"ping\")\n'{\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"id\": 2}'\n</code></pre> <p>It simply applies <code>str</code> after <code>request</code>.</p>"},{"location":"requests/#ids","title":"Ids","text":"<p>Subsequent calls increment the <code>id</code>:</p> <pre><code>&gt; &gt; &gt; request(\"ping\")\n&gt; &gt; &gt; {\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"2.0\", \"id\": 3}\n&gt; &gt; &gt; request(\"ping\")\n&gt; &gt; &gt; {\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"2.0\", \"id\": 4}\n</code></pre> <p>Use an explicit <code>id</code>:</p> <pre><code>&gt; &gt; &gt; request(\"ping\", id=\"foo\")\n&gt; &gt; &gt; {\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"2.0\", \"id\": \"foo\"}\n</code></pre> <p>Or generate a different type of <code>id</code>:</p> <pre><code>&gt;&gt;&gt; from jsonrpcclient import request_hex, request_random, request_uuid\n&gt;&gt;&gt; request_hex(\"foo\")\n{\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": \"1\"}\n&gt;&gt;&gt; request_random(\"foo\")\n{\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": \"qzsib147\"}\n&gt;&gt;&gt; request_uuid(\"foo\")\n{\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": \"45480a2f-069c-42aa-a67f-f6fdd83d6026\"}\n</code></pre>"},{"location":"requests/#parameters","title":"Parameters","text":"<p>Pass <code>params</code> to include parameters in the payload. This should be either a tuple for positional arguments, or dict for keyword arguments.</p> <pre><code>&gt;&gt;&gt; request(\"ping\", params=(1,))\n{\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"2.0\", \"params\": [1], \"id\": 5}\n&gt;&gt;&gt; request(\"ping\", params={\"key\": \"val\"})\n{\"jsonrpc\": \"2.0\", \"method\": \"ping\", \"2.0\", \"params\": {\"key\": \"val\"}, \"id\": 6}\n</code></pre>"},{"location":"requests/#json-requests","title":"JSON requests","text":"<p>If you need the request serialized to a string, use <code>request_json</code>:</p> <pre><code>&gt;&gt;&gt; from jsonrpcclient import request_json\n&gt;&gt;&gt; request_json(\"foo\")\n'{\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": 6}'\n</code></pre> <p>You can also use request_json_hex etc., for the other id types.</p>"},{"location":"requests/#batch-requests","title":"Batch requests","text":"<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; json.dumps([request(\"foo\") for _ in range(3)])\n'[{\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": 7}, {\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": 8}, {\"jsonrpc\": \"2.0\", \"method\": \"foo\", \"id\": 9}]'\n</code></pre>"},{"location":"requests/#notifications","title":"Notifications","text":"<p>Use the <code>notification</code> function instead of <code>request</code>:</p> <pre><code>&gt;&gt;&gt; from jsonrpcclient import notification\n&gt;&gt;&gt; notification(\"ping\")\n{\"jsonrpc\": \"2.0\", \"method\": \"ping\"}\n</code></pre> <p>As with <code>request_json</code>, <code>notification_json</code> will give you the notification as a JSON string.</p> <pre><code>&gt;&gt;&gt; from jsonrpcclient import notification_json\n&gt;&gt;&gt; notification_json(\"ping\")\n'{\"jsonrpc\": \"2.0\", \"method\": \"ping\"}'\n</code></pre>"},{"location":"responses/","title":"Parsing responses","text":"<p>The library includes a <code>parse</code> function which turns a deserialized response into a nice namedtuple.</p> <pre><code>&gt;&gt;&gt; parse({\"jsonrpc\": \"2.0\", \"result\": \"pong\", \"id\": 1})\nOk(result='pong', id=1)\n&gt;&gt;&gt; parse({\"jsonrpc\": \"2.0\", \"error\": {\"code\": 1, \"message\": \"There was an error\", \"data\": None}, \"id\": 1})\nError(code=1, message='There was an error', data=None, id=1)\n</code></pre> <p>If you have a string, use <code>parse_json</code>.</p> <pre><code>&gt;&gt;&gt; parse_json('{\"jsonrpc\": \"2.0\", \"result\": \"pong\", \"id\": 1}')\nOk(result='pong', id=1)\n</code></pre> <p>To use the result, in Python versions prior to 3.10:</p> <pre><code>from jsonrpcclient import Error, Ok\nparsed = parse(response)\nif isinstance(parsed, Ok):\n    print(parsed.result)\nelif isinstance(parse, Error):\n    logging.error(parsed.message)\n</code></pre> <p>In Python 3.10+, use pattern matching:</p> <pre><code>match parse(response):\n    case Ok(result, id):\n        print(result)\n    case Error(code, message, data, id):\n        logging.error(message)\n</code></pre>"}]}