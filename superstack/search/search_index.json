{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#superstack","title":"SuperStack","text":"<p>Jump to: GitHub | Developer Wiki</p> <p>SuperStack is a minimal, modular backend powered by PostgreSQL \u2014 perfect for indie developers, SaaS builders, and teams who want full control without the bloat.</p> <p>Spin up a fully working backend in seconds. Just clone, run, and start building.</p>"},{"location":"#what-can-i-do-with-superstack","title":"\ud83d\ude80 What Can I Do with SuperStack?","text":"<p>It's perfect for:</p> <ul> <li>\ud83e\uddf1 Building SaaS apps</li> <li>\ud83d\udcbb Running multiple stacks locally</li> <li>\ud83d\udce6 Easy database migrations</li> <li>\ud83d\udd27 Customizing your toolchain</li> </ul> <p>Everything runs inside Docker and routes through a single exposed port (via Caddy), making it easy to develop locally or deploy remotely.</p>"},{"location":"#architecture","title":"\ud83c\udfdb\ufe0f Architecture","text":"<pre><code>flowchart TD\n    APIGateway[\"API Gateway (Caddy)\"]\n    APIGateway --&gt; Services[\"Services (PostgREST, + add more)\"]\n    Services --&gt; Database[\"Database (Postgres)\"]\n</code></pre>"},{"location":"#whats-next","title":"\ud83d\udcda What's next?","text":"<p>\ud83d\udc49 Getting Started \u2013 a guide to installing SuperStack and launching the stack.</p>"},{"location":"bluegreen/","title":"Blue/Green Deployments","text":"<p>Blue/Green deployment runs two stacks side-by-side: one live, one idle. You deploy to the idle stack, test it, and when ready, swap roles \u2014 giving near-zero downtime and easy rollback.</p> <p></p> <p>Blue/Green adds some complexity because where before there was just \"the stack\", now there is:</p> <ol> <li>A <code>blue</code> stack</li> <li>A <code>green</code> stack</li> <li>A front proxy to direct traffic</li> <li>An external Postgres.</li> </ol>"},{"location":"bluegreen/#2-adjust-caddy","title":"2. Adjust Caddy","text":""},{"location":"bluegreen/#name-the-caddy-containers","title":"Name the Caddy containers","text":"<p>Naming the Caddy containers <code>blue_caddy</code> and <code>green_caddy</code> allows the front proxy to direct traffic to the correct stacks:</p> compose.yaml<pre><code>caddy:\n  container_name: ${STACK_NAME}_caddy\n</code></pre>"},{"location":"bluegreen/#remove-exposed-ports","title":"Remove exposed ports","text":"<p>We'll no longer expose ports in the stacks, instead a front proxy will sit in front of the two stacks, proxying to them.</p> <p>So remove the <code>caddy</code> service's <code>ports:</code> section in <code>compose.yaml</code>.</p>"},{"location":"bluegreen/#serve-http-only-in-the-stacks","title":"Serve HTTP-only in the stacks","text":"<p>Set <code>CADDY_SITE_ADDRESS</code> to only <code>:80</code>, removing <code>:443</code> (leaving TLS termination to the front proxy):</p> compose.yaml<pre><code>caddy:\n  environment:\n    CADDY_SITE_ADDRESS: :80\n</code></pre>"},{"location":"bluegreen/#2-postgres","title":"2. Postgres","text":"<p>It's not advised to run two separate PostgreSQL instances and having them both simultaneously access the same shared volume.</p> <p>So we need to move Postgres out of the compose file and start it separately.</p> <p>Create a network:</p> <pre><code>docker network create shared\n</code></pre> <p>And add it to the Compose file:</p> compose.yaml<pre><code>networks:\n  shared:\n    name: shared\n    external: true\n</code></pre> <p>Then in services that need db access:</p> compose.yaml<pre><code>networks:\n  - shared\n</code></pre> <p>Move Postgres out of compose.yaml into a shared-compose.yaml, adding the <code>shared</code> network:</p>"},{"location":"bluegreen/#3-volumes","title":"3. Volumes","text":"<p>To share data between the two stacks (uploads, etc.), give volumes explicit names:</p> compose.yaml<pre><code>volumes:\n  user_data:\n    name: user-data\n</code></pre>"},{"location":"bluegreen/#4-bring-up-two-stacks","title":"4. Bring up two Stacks","text":"<p>Deploying is the same as before, but now we're deploying the idle stack. For this example, <code>green</code> is idle so that's the one we're deploying.</p> <p>Create <code>blue</code> and <code>green</code> directories on the server and copy <code>compose.yaml</code> into the idle stack's directory:</p> <pre><code>scp compose.yaml youruser@yourserver:green/compose.yaml\n</code></pre> <p>Shell into the server and bring up the idle stack:</p> <pre><code>cd green\ndocker compose pull\nSTACK_NAME=green docker compose up -d\n</code></pre> <p>Docker will use the directory name <code>green</code> as the project name, creating different containers, volumes and networks than the <code>blue</code> stack.</p>"},{"location":"bluegreen/#5-add-a-front-proxy","title":"5. Add a Front Proxy","text":"<p>The front proxy is a single container that binds ports <code>80</code> and <code>443</code> on the server and routes requests into either the Blue or Green stack.</p> <p>On the server, create a simple <code>Caddyfile</code>:</p> caddy/Caddyfile<pre><code>api.myapp.com {\n  reverse_proxy blue_caddy:80\n}\n</code></pre> <p>Optionally, point a second hostname to the idle stack for testing.</p> <p>The front proxy manages TLS, so give it a persistent volume for certificates:</p> <pre><code>docker volume create caddy_data\n</code></pre> <p>Start the proxy, attaching it to both networks \u2013 this requires both stacks to be up first, so the networks exist:</p> <pre><code>docker run -d \\\n  --name front-proxy \\\n  -p 80:80 -p 443:443 \\\n  -v ./caddy:/etc/caddy \\\n  -v caddy_data:/data \\\n  --network blue_default \\\n  --network green_default \\\n  caddy:2\n</code></pre>"},{"location":"bluegreen/#6-upgrading","title":"6. Upgrading","text":""},{"location":"bluegreen/#flip-traffic","title":"Flip traffic","text":"<p>Point traffic to the <code>green</code> stack:</p> Caddyfile<pre><code>api.myapp.com {\n  reverse_proxy green_caddy:80\n}\n</code></pre> <p>Reload the front proxy's config:</p> <pre><code>docker exec front-proxy caddy reload\n</code></pre> <p>Cutover is instant. Green is now live, and Blue is the idle stack.</p> <p>And rollback is simple: flip the <code>Caddyfile</code> back and <code>caddy reload</code> again.</p>"},{"location":"bluegreen/#github-actions","title":"Github Actions","text":"<p>Here's a workflow for B/G deploys:</p> Click to expand .github/workflows/ci.yaml<pre><code>name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Start SSH agent\n        uses: webfactory/ssh-agent@v0.9.0\n        with:\n          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}\n\n      - name: Get the idle stack\n        id: idle\n        run: |\n          ACTIVE=$(ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \\\n            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \\\n            'cat active_stack 2&gt;/dev/null || echo blue')\n\n          if [ \"$ACTIVE\" = \"blue\" ]; then\n            echo \"IDLE=green\" &gt;&gt; $GITHUB_OUTPUT\n          else\n            echo \"IDLE=blue\" &gt;&gt; $GITHUB_OUTPUT\n          fi\n          echo \"ACTIVE=$ACTIVE\" &gt;&gt; $GITHUB_OUTPUT\n\n      - name: Copy compose.yaml to idle stack\n        uses: appleboy/scp-action@master\n        with:\n          host: ${{ secrets.VPS_HOST }}\n          username: ${{ secrets.VPS_USER }}\n          port: 22\n          key: ${{ secrets.VPS_SSH_KEY }}\n          source: \"compose.yaml\"\n          target: \"${{ steps.idle.outputs.IDLE }}/\"\n\n      - name: Deploy idle stack\n        uses: appleboy/ssh-action@v1.0.3\n        with:\n          host: ${{ secrets.VPS_HOST }}\n          username: ${{ secrets.VPS_USER }}\n          key: ${{ secrets.VPS_SSH_KEY }}\n          envs: GHCR_PAT\n          script: |\n            set -euo pipefail\n            echo \"${{ steps.idle.outputs.ACTIVE }}\" &gt; active_stack\n            cd ${{ steps.idle.outputs.IDLE }}\n            echo \"$GHCR_PAT\" | docker login ghcr.io -u \"${{ github.actor }}\" --password-stdin\n            DOCKER_CLIENT_TIMEOUT=300 COMPOSE_HTTP_TIMEOUT=300 docker compose pull -q\n            STACK_NAME=${{ steps.idle.outputs.IDLE }} docker compose up -d\n        env:\n          GHCR_PAT: ${{ secrets.GHCR_PAT }}\n</code></pre>  If you want to auto-flip between blue and green, add this extra task:  <pre><code>- name: Flip traffic\n  uses: appleboy/ssh-action@v1.0.3\n  with:\n    host: ${{ secrets.VPS_HOST }}\n    username: ${{ secrets.VPS_USER }}\n    key: ${{ secrets.VPS_SSH_KEY }}\n    script: |\n      if [ \"${{ steps.idle.outputs.IDLE }}\" = \"blue\" ]; then\n        sed -i 's/green_caddy/blue_caddy/g' caddy/Caddyfile\n      else\n        sed -i 's/blue_caddy/green_caddy/g' caddy/Caddyfile\n      fi\n      docker exec front-proxy caddy reload --config /etc/caddy/Caddyfile\n      echo \"${{ steps.idle.outputs.IDLE }}\" &gt; active_stack\n</code></pre>"},{"location":"deploying/","title":"\u2601\ufe0f Deploying to Remote Environments","text":"<p>SuperStack is Docker-native, so deployment is simple and portable. Here's how to deploy it to a remote server.</p> <p>A goal of SuperStack is that only <code>compose.yaml</code> should be required on the remote server.</p>"},{"location":"deploying/#1-prepare-your-images","title":"\u2705 1. Prepare your Images","text":"<p>For services that are built (they have a <code>build:</code> section in <code>compose.yaml</code>), add your own container repository image URIs (e.g. your Docker Hub or GitHub Container Registry account), for example:</p> compose.yaml<pre><code>caddy:\n  build:\n    context: ./caddy\n  image: ghcr.io/youruser/yourapp-caddy:0.1.0\n\npostgres:\n  build:\n    context: ./postgres\n  image: ghcr.io/youruser/yourapp-postgres:0.1.0\n</code></pre>"},{"location":"deploying/#2-build-and-push-your-images","title":"\ud83d\udee0\ufe0f 2. Build and Push your Images","text":"<p>Build your images locally and push to your registry:</p> <pre><code>docker compose build\ndocker compose push\n</code></pre>"},{"location":"deploying/#3-deploy-the-compose-file","title":"\ud83d\udce6 3. Deploy the Compose File","text":"<p>Copy <code>compose.yaml</code> to the server:</p> <pre><code>scp compose.yaml youruser@yourserver:\n</code></pre>"},{"location":"deploying/#4-set-secrets","title":"4. Set Secrets","text":"<p>The stack needs your secrets (passwords, keys, etc.). There are a few options:</p> <ol> <li>Put secrets in a <code>.env</code> file on the server. Convenient but Less secure. Be    sure to <code>chmod 600 .env</code>.</li> <li>Set environment variables in the the <code>docker compose</code> command. Inconvenient.    Be sure to disable shell history.</li> <li>Use environment injection in your CI/CD.</li> </ol>"},{"location":"deploying/#5-launch-your-stack","title":"\ud83d\ude80 5. Launch your Stack","text":"<p>SSH into your server and bring up the stack:</p> <pre><code>docker compose pull\ndocker compose up -d\n</code></pre> <p>That\u2019s it \u2014 your backend is live.</p> <p>If this is the first time bringing up your stack, the migrations will run automatically. Subsequently, to upgrade your app you should:</p> <pre><code>docker compose pull\ndocker compose up -d\ndocker compose exec postgres migrate\n</code></pre>"},{"location":"extensions/","title":"\ud83e\udde9 Postgres Extensions","text":"<p>SuperStack supports PostgreSQL extensions, letting you add powerful features like cryptographic functions or JWT handling.</p>"},{"location":"extensions/#building-an-extension-from-source","title":"\ud83d\udee0\ufe0f Building an Extension from Source","text":"<p>Some extensions (like pgjwt) must be compiled manually.</p>"},{"location":"extensions/#1-clone-the-extension-source","title":"1. Clone the Extension Source","text":"<pre><code>git clone https://github.com/michelp/pgjwt postgres/pgjwt\n</code></pre>"},{"location":"extensions/#2-modify-the-postgres-dockerfile","title":"2. Modify the Postgres Dockerfile","text":"<p>Edit the Postgres Dockerfile to install build tools and compile the extension:</p> postgres/Dockerfile<pre><code>RUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    postgresql-server-dev-17\n\n# pgjwt - used by the auth schema\nCOPY ./pgjwt /pgjwt\nWORKDIR /pgjwt\nRUN make &amp;&amp; make install\n\n# Reset workdir\nWORKDIR /var/lib/postgresql\n</code></pre> <p>\ud83e\uddfc Set <code>WORKDIR</code> back to the default to avoid unintended effects.</p>"},{"location":"extensions/#3-rebuild-the-container","title":"3. Rebuild the Container","text":"<pre><code>docker compose build postgres\n</code></pre> <p>That\u2019s it \u2014 the extension is now available to load in your migrations.</p>"},{"location":"extensions/#loading-an-extension","title":"\ud83d\udd0c Loading an Extension","text":"<p>To load extensions, create a migration file such as:</p> postgres/migrations/01-extensions.sql<pre><code>create extension pgcrypto;\n</code></pre> <p>\u26a0\ufe0f <code>create extension</code> is non-transactional, so don\u2019t wrap this in <code>BEGIN/COMMIT</code>.</p>"},{"location":"gettingstarted/","title":"\ud83d\ude80 Getting Started","text":"Your browser does not support the video tag.  <p>SuperStack uses Docker, so make sure Docker is installed before you begin.</p>"},{"location":"gettingstarted/#1-get-superstack","title":"1. Get SuperStack","text":""},{"location":"gettingstarted/#option-1-use-the-template-easiest","title":"Option 1: Use the Template (Easiest)","text":"<p>Click Use this template and create a new repository (e.g. <code>myapp-backend</code>) on GitHub.</p> <p>Clone it to your machine:</p> <pre><code>git clone https://github.com/yourname/myapp-backend.git\ncd myapp-backend\n</code></pre>"},{"location":"gettingstarted/#option-2-clone-and-track-upstream-advanced","title":"Option 2: Clone and Track Upstream (Advanced)","text":"<p>If you want to keep SuperStack\u2019s Git history and pull upstream changes later, clone SuperStack:</p> <pre><code>git clone https://github.com/explodinglabs/superstack.git myapp-backend\ncd myapp-backend\n</code></pre> <p>Create your own repo, then:</p> <pre><code>git remote rename origin upstream\ngit remote add origin https://github.com/yourname/myapp-backend.git\ngit push -u origin main\n</code></pre> <p>You can now pull upstream changes with:</p> <pre><code>git pull upstream main\n</code></pre>"},{"location":"gettingstarted/#2-configure-environment-variables","title":"2. Configure Environment Variables","text":"<p>Copy the example environment file:</p> <pre><code>cp example.env .env\n</code></pre> <p>This <code>.env</code> file is used to set secrets, passwords, keys, etc.</p> <p>\u26a0\ufe0f Never store secrets in version control.</p>"},{"location":"gettingstarted/#3-start-the-stack","title":"3. Start the Stack","text":"<pre><code>docker compose up -d\n</code></pre> <p>That's it \u2013 your backend is live.</p>"},{"location":"gettingstarted/#what-just-happened","title":"\ud83e\udde9 What Just Happened?","text":"<p>SuperStack automatically:</p> <ol> <li>Starts a fresh Postgres database</li> <li>Applies initial migrations</li> <li>Launches PostgREST</li> <li>Serves everything through Caddy</li> </ol> <p>\ud83d\udca1 Only Caddy exposes a port \u2013 all services are routed through it.</p>"},{"location":"gettingstarted/#whats-next","title":"\u2795 What's Next?","text":"<p>\ud83d\udc49 Create your database schema with migrations \ud83d\udc49 Deploy to a remote environment</p>"},{"location":"migrations/","title":"\ud83d\udcdc Migrations","text":"<p>SuperStack includes a simple built-in system for managing database schema migrations.</p>"},{"location":"migrations/#writing-migrations","title":"\u270d\ufe0f Writing Migrations","text":"<p>Place your migration scripts in:</p> <pre><code>postgres/migrations/\n</code></pre> <p>Each file should be:</p> <ul> <li>An <code>.sql</code> file</li> <li>Numbered in order (e.g. <code>00-init.sql</code>, <code>01-extensions.sql</code>, <code>02-auth.sql</code>)</li> <li>Written in plain SQL</li> <li>But can include environment variables.</li> </ul>"},{"location":"migrations/#applying-migrations","title":"\u25b6\ufe0f Applying Migrations","text":"<p>When the Postgres container starts with no existing data, SuperStack will automatically run migrations once.</p> <p>After the first startup, migrations will only run if you manually apply them.</p> <p>To apply your migrations, run:</p> <pre><code>bin/postgres migrate\n</code></pre> <p>This command will:</p> <ol> <li>Apply new migrations, in filename order.</li> <li>Record applied migrations in a file named <code>.applied_migrations</code>.</li> </ol> <p>Already-applied scripts are skipped on subsequent runs.</p> <p>\ud83d\udca1 <code>bin/postgres</code> is a small script that effectively aliases <code>docker compose exec postgres</code></p> <p>Here's an example migration script:</p> postgres/migrations/02-create_table_example.sql<pre><code>begin;\n\ncreate table director (\n  id serial primary key,\n  name text not null\n);\n\ncreate table movie (\n  id serial primary key,\n  name text not null,\n  director_id integer references director(id)\n);\n\ncommit;\n</code></pre>"},{"location":"migrations/#transactions","title":"\ud83d\udd01 Transactions","text":"<p>Use <code>begin;</code> and <code>commit;</code> to wrap statements in a transaction. This ensures that all changes are applied atomically. Any statements outside of transactions will be auto-committed.</p> <p>Avoid wrapping non-transactional operations in a transaction \u2014 these will cause errors if used inside <code>begin ... commit</code>. Examples of non-transactional statements include:</p> <pre><code>ALTER SYSTEM\nCREATE DATABASE\nCREATE EXTENSION\nCREATE ROLE\nCREATE TABLESPACE\nDROP DATABASE\nDROP EXTENSION\nDROP TABLESPACE\n</code></pre>"},{"location":"migrations/#environment-variables","title":"Environment Variables","text":"<p>Env vars can be used in migrations:</p> <pre><code>\\set pgrst_authenticator_pass '$PGRST_AUTHENTICATOR_PASS'\n</code></pre> <p>Reduce the chance of environment variables being logged by putting them into variables with <code>\\set</code>, then use the value later:</p> <pre><code>create role authenticator noinherit login password :'pgrst_authenticator_pass';\n</code></pre>"},{"location":"migrations/#suggested-file-layout","title":"Suggested File Layout","text":"<p>SuperStack doesn\u2019t enforce any particular migration file names or layout, but here\u2019s a simple structure you might adopt during development (before production):</p> <pre><code>01-extensions.sql\n02-auth_schema.sql  (if using PostgREST for auth)\n03-api_schema.sql\n04-roles.sql\n05-grants.sql\n</code></pre> <p>While developing, you can reset and rebuild the database from scratch as often as needed:</p> <pre><code>docker compose down --volumes\ndocker compose up -d\n</code></pre> <p>Once you\u2019ve deployed to production (or another persistent environment), avoid recreating the database. Instead:</p> <ul> <li>Add new migrations starting from <code>06-...</code> onwards.</li> <li>Apply them with:</li> </ul> <pre><code>bin/postgres migrate\n</code></pre> <p>Or in other environments where <code>bin/postgres</code> isn't available:</p> <pre><code>docker compose exec postgres migrate\n</code></pre> <p>This approach keeps early development simple while providing a clear, ordered history once the database must be preserved.</p>"},{"location":"migrations/#nuke-everything","title":"\ud83d\udd04 Nuke Everything","text":"<p>If you want to start fresh, wipe your database and re-run all migrations from scratch:</p> <pre><code>docker compose down --volumes\ndocker compose up -d\n</code></pre>"},{"location":"psql/","title":"\ud83d\udda5\ufe0f Using psql","text":"<p><code>psql</code> is the command-line tool for interacting with your PostgreSQL database. SuperStack makes it easy to run psql inside the container using a helper script.</p>"},{"location":"psql/#open-a-psql-shell","title":"\ud83d\udcdf Open a psql Shell","text":"<p>To connect interactively:</p> <pre><code>bin/postgres\n</code></pre> <p>Example output:</p> <pre><code>psql (17.5 (Debian 17.5-1.pgdg120+1))\nType \"help\" for help.\n\napp=#\n</code></pre> <p>\ud83d\uddd2\ufe0f By default, <code>bin/postgres</code> opens a <code>psql</code> shell. You can also run other commands in the container like <code>bin/postgres bash</code> if needed, or psql explicitly with <code>bin/postgres psql</code>.</p>"},{"location":"psql/#run-inline-sql-commands","title":"\ud83d\udd39 Run Inline SQL Commands","text":"<p>You can also run SQL directly without opening an interactive shell:</p> <pre><code>bin/postgres -c 'select * from movie;'\n</code></pre> <p>\u2705 Because <code>bin/postgres</code> defaults to <code>psql</code>, you don\u2019t need to type <code>psql</code> explicitly.</p>"},{"location":"psql/#customize-psql-behavior","title":"\u2699\ufe0f Customize psql Behavior","text":"<p>You can persist your preferences using <code>.psqlrc</code> and <code>.inputrc</code>.</p>"},{"location":"psql/#step-1-create-a-config-directory","title":"\ud83d\udd27 Step 1: Create a config directory","text":"<pre><code>mkdir -p postgres/rc\n</code></pre>"},{"location":"psql/#psqlrc","title":"\ud83d\udcc4 .psqlrc","text":"<p>Create <code>postgres/rc/.psqlrc</code> with your preferred settings:</p> <pre><code>\\pset pager off\n\\setenv PAGER 'less -S'\n</code></pre> <p>See the official psql reference for all available options.</p>"},{"location":"psql/#inputrc","title":"\ud83d\udcc4 .inputrc","text":"<p>Create <code>postgres/rc/.inputrc</code> to set readline behavior:</p> <pre><code>set editing-mode vi\n</code></pre>"},{"location":"psql/#step-2-mount-and-apply-the-configs","title":"\ud83d\udd17 Step 2: Mount and apply the configs","text":"<p>Add to your <code>compose.override.yaml</code> (this file is for development-only overriding of <code>compose.yaml</code>):</p> compose.override.yaml<pre><code>services:\n  postgres:\n    volumes:\n      - ./postgres/rc:/rc:ro\n    environment:\n      PSQLRC: /rc/.psqlrc\n      INPUTRC: /rc/.inputrc\n</code></pre>"},{"location":"psql/#step-3-restart-the-postgres-container","title":"\ud83d\udd01 Step 3: Restart the Postgres container","text":"<pre><code>docker compose up -d --force-recreate postgres\n</code></pre>"},{"location":"structure/","title":"Build Your App","text":""},{"location":"structure/#project-structure","title":"Project Structure","text":"<pre><code>\ud83d\udcc1 bin/                  \u2192 Helper scripts (e.g. wrappers for CLI tools)\n\ud83d\udcc1 caddy/                \u2192 Caddy configuration\n\ud83d\udcc1 docs/                 \u2192 Markdown files for SuperStack documentation\n\ud83d\udcc1 postgres/             \u2192 Postgres configuration and SQL migrations\n\ud83d\udcc4 compose.yaml          \u2192 Main Docker Compose config\n\ud83d\udcc4 compose.override.yaml \u2192 Optional local overrides (development only)\n\ud83d\udcc4 example.env           \u2192 Example environment variables \u2014 copy to `.env`\n\ud83d\udcc4 LICENSE               \u2192 License file (MIT)\n\ud83d\udcc4 logo.png              \u2192 SuperStack logo for README/docs\n\ud83d\udcc4 README.md             \u2192 Overview and quick start for the repository\n</code></pre>"},{"location":"upgrading/","title":"Upgrading SuperStack","text":"<p>To upgrade SuperStack, you need to have followed the Advanced method in Getting Started. Then:</p> <pre><code>git pull upstream main\n</code></pre>"}]}