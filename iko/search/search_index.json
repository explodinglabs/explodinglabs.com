{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#iko","title":"ik\u014d","text":"<p>Iko (ee-koh) is a lightweight containerized tool for managing PostgreSQL database migrations with confidence.</p> <p>It wraps Sqitch with developer-friendly commands and a powerful Bash-based scripting model.</p>"},{"location":"#what-can-i-do-with-iko","title":"\ud83d\ude80 What can I do with Iko?","text":"<ul> <li>Create clean, verifiable migrations using prebuilt templates</li> <li>Run migrations in Docker with zero local setup</li> <li>Script database structure in portable Bash files</li> <li>Build a production-ready migration image for CI/CD</li> </ul>"},{"location":"#whats-next","title":"\ud83e\udded What's Next?","text":"Topic Description Getting Started Install Iko and run your first migration Running Commands Learn the 3 ways to run Iko commands (CLI, shell, scripts) Scripting Migrations Write reusable Bash scripts to generate migrations Deploying Migrations to Remote Environments Configure targets and deploy to staging/production Command Reference Full list of DSL commands"},{"location":"commands/","title":"Command Reference","text":"<p>This page lists all the commands provided by Iko.</p> <p>Iko provides a developer-friendly DSL for defining database migrations. These commands generate <code>deploy</code>, <code>revert</code>, and <code>verify</code> scripts using built-in templates and follow a consistent pattern.</p> <p>You can run commands:</p> <ul> <li>Directly from the command line</li> <li>Inside an interactive Iko shell</li> <li>From reusable Bash scripts</li> </ul> <p>\ud83d\udc49 For a breakdown of these options, see Running Commands. \ud83d\udc49 For tips on writing migration scripts, see Scripting.</p>"},{"location":"commands/#sqitch-commands","title":"\ud83d\udd01 Sqitch Commands","text":"<p>Iko wraps and aliases all core Sqitch commands.</p> <p>For example:</p> <pre><code>iko deploy\niko revert\niko status\n</code></pre> <p>You can also access Sqitch directly:</p> <pre><code>iko sqitch --version\n</code></pre>"},{"location":"commands/#ad-hoc-migrations","title":"\ud83e\udde9 Ad-Hoc Migrations","text":""},{"location":"commands/#add","title":"add","text":"<p>If your change doesn\u2019t match one of the built-in commands, you can use <code>add</code> to create a named migration manually:</p> <pre><code>add create_customer_view\n</code></pre> <p>You\u2019ll be prompted to enter a note, and then edit the deploy/revert/verify SQL files yourself.</p> <p>Only the deploy script is required. The verify and revert scripts are optional.</p> <p>More details: sqitch-add docs</p>"},{"location":"commands/#add_as","title":"add_as","text":"<p>Create a custom migration with inline deploy SQL.</p> <p>This is useful in scripts when your change isn\u2019t covered by a built-in command but you want to define the deploy step inline (instead of editing manually like with <code>add</code>).</p> <p>\u26a0\ufe0f <code>add_as</code> creates empty verify and revert scripts. So the change won't be verified or reverted (unless you write these manually later).</p> <p>Syntax:</p> <pre><code>add_as &lt;change&gt; &lt;&lt;'SQL'\n&lt;sql&gt;\nSQL\n</code></pre> <p>Example:</p> <pre><code>add_as create_customer_view &lt;&lt;'SQL'\ncreate view customer_view as\nselect id, name from customer;\nSQL\n</code></pre>"},{"location":"commands/#comments","title":"\ud83d\udde8\ufe0f Comments","text":""},{"location":"commands/#comment","title":"comment","text":"<p>\u26a0\ufe0f Note only commenting on schemas, tables, columns and functions are supported currently.</p> <p>Add or update a comment on a Postgres object.</p> <p>Syntax:</p> <pre><code>comment &lt;object&gt; &lt;comment&gt;\n</code></pre> <p>The comment can be a string or a heredoc.</p> <p>Examples:</p> <pre><code>comment schema api 'Schema for the API endpoints'\ncomment table api.customer &lt;&lt;'EOF'\nThe customer table\n\nSchema for the api.customer table.\nEOF\ncomment column api.customer.name 'The customer\\'s name'\n</code></pre> <pre><code>comment function api.encrypt_pass() 'Hashes passwords'\n</code></pre> <pre><code>comment function api.do_thing(integer, text) 'Does something'\n</code></pre>"},{"location":"commands/#extensions","title":"\ud83e\udde9 Extensions","text":""},{"location":"commands/#create_extension","title":"create_extension","text":"<p>Install a Postgres extension.</p> <p>Syntax:</p> <pre><code>create_extension &lt;extension&gt;\n</code></pre> <p>Example:</p> <pre><code>create_extension pgcrypto\n</code></pre>"},{"location":"commands/#functions","title":"\ud83e\udde0 Functions","text":""},{"location":"commands/#create_function","title":"create_function","text":"<p>Create a function using your editor.</p> <p>Syntax:</p> <pre><code>create_function &lt;function&gt;\n</code></pre> <p>Example:</p> <pre><code>create_function create_user\n</code></pre>"},{"location":"commands/#create_function_as","title":"create_function_as","text":"<p>Define a function inline \u2014 useful in scripts.</p> <p>Syntax:</p> <pre><code>create_function_as &lt;function&gt; &lt;&lt;'SQL'\n&lt;sql&gt;\nSQL\n</code></pre> <p>Example:</p> <pre><code>create_function_as square &lt;&lt;'SQL'\ncreate function square(n int) returns int as $$\nbegin\n  return n * n;\nend;\n$$ language plpgsql;\nSQL\n</code></pre>"},{"location":"commands/#grants","title":"\ud83d\udd10 Grants","text":""},{"location":"commands/#grant_execute","title":"grant_execute","text":"<p>Grant execute permission on a function.</p> <p>Syntax:</p> <pre><code>grant_execute &lt;function&gt; &lt;signature&gt; &lt;role&gt;\n</code></pre> <p>Example:</p> <pre><code>grant_execute login '(text,text)' dbuser\n</code></pre>"},{"location":"commands/#grant_schema_usage","title":"grant_schema_usage","text":"<p>Grant usage on a schema.</p> <p>Syntax:</p> <pre><code>grant_schema_usage &lt;schema&gt; &lt;role&gt;\n</code></pre> <p>Example:</p> <pre><code>grant_schema_usage api dbuser\n</code></pre>"},{"location":"commands/#grant_role_membership","title":"grant_role_membership","text":"<p>Grant membership in a role.</p> <p>Syntax:</p> <pre><code>grant_role_membership &lt;role_specification&gt; &lt;role&gt;\n</code></pre> <p>Example:</p> <pre><code>grant_role_membership authenticator dbuser\n</code></pre>"},{"location":"commands/#grant_table_privilege","title":"grant_table_privilege","text":"<p>Grant privileges on a table.</p> <p>Syntax:</p> <pre><code>grant_table_privilege &lt;type&gt; &lt;table&gt; &lt;role&gt;\n</code></pre> <p>Example:</p> <pre><code>grant_table_privilege insert asset dbuser\n</code></pre>"},{"location":"commands/#roles","title":"\ud83d\udc64 Roles","text":""},{"location":"commands/#create_role","title":"create_role","text":"<p>Create a nologin role.</p> <p>Syntax:</p> <pre><code>create_role &lt;role&gt;\n</code></pre> <p>Example:</p> <pre><code>create_role dbuser\n</code></pre>"},{"location":"commands/#create_login_role","title":"create_login_role","text":"<p>Create a login role with password.</p> <p>Syntax:</p> <pre><code>create_login_role &lt;role&gt; &lt;password&gt;\n</code></pre> <p>Example:</p> <pre><code>create_login_role dbuser 'securepass123'\n</code></pre>"},{"location":"commands/#schemas","title":"\ud83c\udfd7\ufe0f Schemas","text":""},{"location":"commands/#create_schema","title":"create_schema","text":"<p>Syntax:</p> <pre><code>create_schema &lt;schema&gt;\n</code></pre> <p>Example:</p> <pre><code>create_schema api\n</code></pre>"},{"location":"commands/#tables","title":"\ud83e\uddf1 Tables","text":""},{"location":"commands/#create_table","title":"create_table","text":"<p>Create a table using your editor.</p> <p>Syntax:</p> <pre><code>create_table &lt;table&gt;\n</code></pre> <p>Example:</p> <pre><code>create_table customer\n</code></pre>"},{"location":"commands/#create_table_as","title":"create_table_as","text":"<p>Define a table inline \u2014 ideal for scripts.</p> <p>Syntax:</p> <pre><code>create_table_as &lt;table&gt; &lt;&lt;'SQL'\n&lt;sql&gt;\nSQL\n</code></pre> <p>Example:</p> <pre><code>create_table_as customer &lt;&lt;'SQL'\ncreate table customer (\n  id bigint generated always as identity primary key,\n  name text not null,\n  created_at timestamp not null default now()\n);\nSQL\n</code></pre>"},{"location":"commands/#triggers","title":"\ud83d\udd01 Triggers","text":""},{"location":"commands/#create_trigger","title":"create_trigger","text":"<p>Create a trigger linked to a function.</p> <p>Syntax:</p> <pre><code>create_trigger &lt;trigger&gt; &lt;table&gt; &lt;function&gt;\n</code></pre> <p>Example:</p> <pre><code>create_trigger customer_updated customer customer_updated\n</code></pre> <p>Note: Trigger names cannot be schema-qualified \u2014 they inherit the table's schema.</p>"},{"location":"commands/#create_trigger_as","title":"create_trigger_as","text":"<p>Define a trigger inline.</p> <p>Syntax:</p> <pre><code>create_trigger_as &lt;trigger&gt; &lt;table&gt; &lt;&lt;'SQL'\n&lt;sql&gt;\nSQL\n</code></pre> <p>Example:</p> <pre><code>create_trigger_as modify contact &lt;&lt;'SQL'\ncreate trigger modify\n  after insert or update on contact\n  for each row execute function modify_record();\nSQL\n</code></pre>"},{"location":"commands/#next-steps","title":"\u23ed\ufe0f Next Steps","text":"<p>\ud83d\udc49 Learn the different ways to run commands \ud83d\udc49 Or go deeper into writing reusable scripts</p>"},{"location":"deploying/","title":"\ud83d\ude80 Deploying Migrations to Remote Environments","text":"<p>Iko runs inside a container, so to deploy migrations to a remote environment (like staging or production), build a custom Docker image containing your migration scripts.</p> <p>This guide explains how to build and use that image.</p>"},{"location":"deploying/#why-use-a-custom-image","title":"\u2705 Why use a custom image?","text":"<p>The standard Iko CLI uses <code>docker run</code> with a local <code>migrations/</code> directory mounted into the container. This works great locally, but in remote environments:</p> <ul> <li>There's no local <code>migrations/</code> directory to mount.</li> <li>There\u2019s no Git repository cloned.</li> <li>You want repeatable, portable deploys \u2014 not manual file copying.</li> </ul> <p>By building a Docker image that includes your migrations, you ensure the container is fully self-contained and deployable anywhere.</p>"},{"location":"deploying/#step-by-step-build-and-deploy","title":"\ud83e\uddf1 Step-by-Step: Build and Deploy","text":""},{"location":"deploying/#1-create-a-dockerfile","title":"1. Create a Dockerfile","text":"<p>In the root of your project, add a <code>Dockerfile</code> like this:</p> <pre><code>FROM ghcr.io/explodinglabs/iko:0.1.0\nCOPY migrations /repo\n</code></pre> <p>This copies your migrations into the image at /repo, where Iko expects them.</p>"},{"location":"deploying/#2-build-the-image","title":"2. Build the image","text":"<p>Give it a meaningful tag, e.g. for production:</p> <pre><code>docker build -t ghcr.io/&lt;org&gt;/iko-&lt;project&gt;:latest .\n</code></pre> <p>Then push it to your container registry:</p> <pre><code>docker push ghcr.io/your-org/iko-&lt;project&gt;:latest\n</code></pre>"},{"location":"deploying/#3-set-the-target-connection","title":"3. Set the target connection","text":"<p>Iko uses the <code>SQITCH_TARGET</code> environment variable to connect to your database.</p> <p>For example:</p> <pre><code>export SQITCH_TARGET=db:pg://admin:secret@your-database-host/app\n</code></pre> <p>Alternatively, set it in your CI/CD system\u2019s environment configuration.</p> <p>\ud83d\udee1\ufe0f Do not hardcode credentials into your Dockerfile or image. Use CI secrets or -e flags instead.</p>"},{"location":"deploying/#4-run-the-deployment","title":"4. Run the deployment","text":"<p>From your CI/CD pipeline or target server, run:</p> <pre><code>docker run --rm ghcr.io/your-org/iko-your-project:latest deploy --verify\n</code></pre>"},{"location":"deploying/#do-i-need-network","title":"\ud83e\udd14 Do I need --network?","text":"<p>Only if your Postgres instance is running in Docker on the same machine.</p> <p>If so, and it's in a custom Docker network, use:</p> <pre><code>docker run --rm \\\n --network your-network \\\n ghcr.io/your-org/iko-your-project:latest deploy --verify\n</code></pre> <p>Otherwise, for hosted databases (RDS, Cloud SQL, etc.) or Postgres installed on the host system, you don\u2019t need a custom Docker network.</p>"},{"location":"gettingstarted/","title":"\ud83d\udee0\ufe0f Getting Started","text":"<p>This guide walks you through installing Iko and creating your first migration.</p> <p>\ud83d\udcc1 It's recommended to start in a new directory or fresh Git repository:</p> <pre><code>mkdir myapp &amp;&amp; cd myapp\ngit init\n</code></pre> <p>This keeps your migration files organized and version-controlled.</p>"},{"location":"gettingstarted/#1-install-iko","title":"1. Install Iko","text":"<p>\u26a0\ufe0f Iko runs inside a container, so you'll need Docker installed.</p> <p>Install the Iko CLI (for development use):</p> <pre><code>curl -fsSL https://explodinglabs.com/iko/install.sh | sh\n</code></pre> <p>Verify it's working:</p> <pre><code>iko version\n</code></pre>"},{"location":"gettingstarted/#2-create-a-env-file","title":"2. Create a .env file","text":"<p>If Postgres is running inside Docker:</p> <pre><code>SQITCH_TARGET=db:pg://postgres:postgres@postgres/app\nDOCKER_NETWORK=your_docker_network\n</code></pre> <p>If Postgres is installed on your system (e.g. Linux):</p> <pre><code>SQITCH_TARGET=db:pg://postgres:postgres@localhost/app\n</code></pre> <p>On Mac or WSL2, use <code>host.docker.internal</code> instead of <code>localhost</code>.</p> <p>Verify your connection:</p> <pre><code>iko check\n</code></pre> <p>You should get:</p> <pre><code>No registry found in db:pg://postgres@postgres/app. Have you ever deployed?\n</code></pre> <p>This means your connection is working.</p>"},{"location":"gettingstarted/#3-initialise-a-project","title":"3. Initialise a project","text":"<pre><code>iko init myapp\n</code></pre> <p>This creates a new Sqitch project in a <code>migrations/</code> directory.</p>"},{"location":"gettingstarted/#3-create-a-migration","title":"3. Create a migration","text":"<pre><code>iko create_schema api\n</code></pre> <pre><code>Created deploy/create_schema_api.sql\nCreated revert/create_schema_api.sql\nCreated verify/create_schema_api.sql\nAdded \"create_schema_api\" to sqitch.plan\ncreate schema api;\n</code></pre> <p>What happened:</p> <ul> <li>Scripts were created to deploy, revert, and verify the change.</li> <li>The change was added to sqitch.plan.</li> <li>The deploy script was output for your review.</li> </ul>"},{"location":"gettingstarted/#4-deploy-it","title":"4. Deploy it","text":"<pre><code>iko deploy\n</code></pre>"},{"location":"gettingstarted/#whats-next","title":"\ud83e\udded What's Next?","text":"<p>\ud83d\udc49 Running Commands \ud83d\udc49 Iko Command Reference</p>"},{"location":"running/","title":"Running Commands","text":"<p>Iko supports three ways to run commands \u2014 depending on whether you're working interactively or scripting migrations.</p>"},{"location":"running/#1-command-line-mode","title":"1. \ud83d\udd39 Command-Line Mode","text":"<p>Run Iko commands directly in your terminal:</p> <pre><code>iko create_schema api\niko create_table users\niko deploy\n</code></pre> <p>This is the most common mode for quick, one-off tasks or small changes.</p> <p>You can use both:</p> <ul> <li>Iko\u2019s DSL commands like <code>create_table</code>, <code>create_function</code>, etc.</li> <li>Native Sqitch commands like <code>deploy</code>, <code>revert</code>, <code>status</code></li> </ul>"},{"location":"running/#2-shell-mode","title":"2. \ud83d\udd38 Shell Mode","text":"<p>Start an interactive session with:</p> <pre><code>iko shell\n</code></pre> <p>Or just:</p> <pre><code>iko\n</code></pre> <p>You\u2019ll get an <code>iko&gt;</code> prompt where you can run commands without typing iko every time:</p> <pre><code>iko&gt; create_schema auth\niko&gt; create_table sessions\niko&gt; deploy\n</code></pre> <p>Useful when you\u2019re exploring or applying a sequence of changes interactively.</p>"},{"location":"running/#3-script-mode","title":"3. \ud83d\udd3b Script Mode","text":"<p>Write reusable Bash scripts inside your <code>scripts/</code> directory:</p> <pre><code># scripts/auth.sh\n\ncreate_schema auth\n\ncreate_table_as auth.user &lt;&lt;'SQL'\ncreate table auth.user (\n  username text primary key,\n  password text not null,\n  role name not null\n);\nSQL\n</code></pre> <p>Run the script with:</p> <pre><code>iko bash auth.sh\n</code></pre> <p>Script mode is ideal for:</p> <ul> <li>Defining and reusing sets of related migrations</li> <li>Keeping complex changes readable</li> <li>Avoiding repetitive commands</li> </ul>"},{"location":"running/#when-to-use-each","title":"When to Use Each","text":"Mode Best For CLI Simple changes, quick edits Shell Interactive sessions, experimenting Scripts Reusable, readable, and complex changes <p>\u2705 All three modes support the same DSL commands \u2014 choose the style that fits your workflow.</p>"},{"location":"running/#whats-next","title":"\ud83e\udded What's Next?","text":"<p>\ud83d\udc49 Continue to Scripting Iko Migrations</p>"},{"location":"scripting/","title":"\u2728 Scripting Migrations","text":"<p>Iko\u2019s scripting model lets you define migrations in plain Bash \u2014 using the same DSL commands you\u2019d use in CLI or shell mode.</p>"},{"location":"scripting/#where-scripts-go","title":"\ud83d\udcc1 Where Scripts Go","text":"<p>Place your scripts in a <code>scripts/</code> directory in your project:</p> <pre><code>myapp/\n\u251c\u2500\u2500 migrations/\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 auth.sh\n    \u2514\u2500\u2500 roles.sh\n</code></pre>"},{"location":"scripting/#example-script","title":"\ud83e\uddea Example Script","text":"<pre><code># scripts/auth.sh\n\ncreate_schema auth\n\ncreate_table_as auth.user &lt;&lt;'SQL'\ncreate table auth.user (\n  username text primary key,\n  password text not null,\n  role name not null\n);\nSQL\n\ncreate_function_as auth.encrypt_pass &lt;&lt;'SQL'\ncreate function auth.encrypt_pass () returns trigger language plpgsql as $$\nbegin\n  -- hash password before insert/update\n  if tg_op = 'INSERT' or new.password &lt;&gt; old.password then\n    new.password = crypt(new.password, gen_salt('bf'));\n  end if;\n  return new;\nend; $$\nSQL\n</code></pre> <p>Run with:</p> <pre><code>iko bash auth.sh\n</code></pre>"},{"location":"scripting/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use <code>&lt;&lt;'SQL'</code> to safely embed SQL blocks</li> <li>Break large scripts into smaller ones per concern (e.g. auth.sh, roles.sh, audit.sh)</li> <li>Scripts are regular Bash: loops, conditionals, and functions all work</li> </ul>"},{"location":"scripting/#whats-next","title":"\ud83e\udded What's Next?","text":"<p>\ud83d\udc49 See how to deploy migrations to remote environments</p>"}]}